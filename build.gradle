buildscript {
    repositories {
        maven {
            url "http://repo1.maven.org/maven2/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath 'com.benjaminsproule:swagger-gradle-plugin:0.1.4'
    }
}

plugins {
    id 'org.sonarqube' version '2.5'
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'maven-publish'

project.ext.set( "checkstyleConfigFile", file( "${checkstyleConfigFileLocation}" ) )

subprojects {
    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'

    test {
        useTestNG()
    }

    repositories {
        mavenCentral()
        maven { url "http://10.162.12.91/artifactory/repo" }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    jacoco {
        toolVersion = "${jacocoToolVersion}"
    }

    jacocoTestReport {
        additionalSourceDirs = files( "java" )
        reports {
            xml.setEnabled( true )
            html.setDestination( file( "${buildDir}/jacocoHtml" ) )
        }
    }

   task sourceJar( type: Jar, dependsOn: classes) {
       classifier 'sources'
       from sourceSets.main.allSource
   }
   task javadocJar( type: Jar, dependsOn: javadoc) {
     classifier 'javadoc'
     from 'build/docs/javadoc'
   }

   publishing {
       publications {
           mavenJava(MavenPublication) {
               artifact sourceJar
               artifact javadocJar
               artifact "${buildDir}/libs/${artifactId}-${project.version}.jar"
           }
       }
   }
   checkstyleMain {
       configFile = project.checkstyleConfigFile
   }
   checkstyleMain.exclude("**/com/vatolinrp/bitcoin/generated/service/**")
   checkstyleTest {
       configFile = project.checkstyleConfigFile
   }
}

tasks.withType(PublishToMavenRepository) {
  it.dependsOn(':bitcoin-rest:generateSwaggerDocumentation')
}

allprojects {
    apply plugin: 'maven-publish'
    publishing {
        repositories {
            maven {
                url "http://${project.artifactoryHost}/artifactory/libs-${project.version.endsWith('SNAPSHOT') ? 'snapshot' : 'release'}-local"
                credentials {
                    username = "${artifactoryUsername}"
                    password = "${artifactoryPassword}"
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: deployableZIP, extension: 'zip'
            artifact source: file("${rootDir}/bitcoin-rest/build/swagger/swagger.json"), classifier: 'swagger'
        }
    }
}

configurations {
    deployable {
        transitive = false
    }
}

dependencies {
    deployable project(':bitcoin-common')
    deployable project(':bitcoin-model')
    deployable project(':bitcoin-rest')
    deployable project(':bitcoin-soap')
    deployable project(':bitcoin-wsdl')
}

task deployableZIP(type: Zip) {
    dependsOn configurations.deployable

    baseName = "bitcoin-esb-${project.version}"
    destinationDir = buildDir

    configurations.deployable.collect {
        from it
    }
}

task cleanBuildDir(type: Delete) {
  delete buildDir
}

release {
    preTagCommitMessage = '[Researchgate Release Plugin] pre tag commit:'
    tagCommitMessage = '[Researchgate Release Plugin]'
    newVersionCommitMessage = '[Researchgate Release Plugin] version commit:'
    buildTasks = ['releaseBuild', 'publish']
    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        commitVersionFileOnly = false
    }
}

task releaseBuild {
  dependsOn(
          'cleanBuildDir',
          project('bitcoin-wsdl').clean,
          project('bitcoin-wsdl').build,
          project('bitcoin-wsdl').publish,
          project('bitcoin-model').clean,
          project('bitcoin-model').build,
          project('bitcoin-model').publish,
          project('bitcoin-common').clean,
          project('bitcoin-common').build,
          project('bitcoin-common').publish,
          project('bitcoin-soap').clean,
          project('bitcoin-soap').build,
          project('bitcoin-soap').publish,
          project('bitcoin-rest').clean,
          project('bitcoin-rest').build,
          project('bitcoin-rest').publish
)
}

task wrapper (type: Wrapper) {
    gradleVersion = '4.2'
    distributionType Wrapper.DistributionType.ALL
}
